import {
    SpinBox,
    VerticalBox,
    HorizontalBox,
    ScrollView,
} from "std-widgets.slint";
import { State } from "state.slint";
import { TextBlock } from "types.slint";

export component TextBlockAnnotation inherits Rectangle {
    in property <TextBlock> text-block;
    in property <int> index;
    in property <int> scale: 100;

    border-color: #ff9999;
    border-width: 2px;

    x: text-block.x * 1px * scale / 100;
    y: text-block.y * 1px * scale / 100;
    width: text-block.width * 1px * scale / 100;
    height: text-block.height * 1px * scale / 100;

    Rectangle {
        border-color: #ff9999;
        border-radius: 999px;
        border-width: 2px;
        background: #ff9999;

        width: 16px;
        height: 16px;
        x: -8px;
        y: -8px;

        Text {
            text: root.index;
            color: white;
            font-size: 12px;
            font-weight: 400;
            horizontal-alignment: center;
            vertical-alignment: center;
        }
    }
}

export component CanvasControl inherits Rectangle {
    in-out property <int> scale: 100;

    height: 20px;
    horizontal-stretch: 1;
    border-color: #CCCCCC;
    border-width: 1px;

    HorizontalLayout {
        alignment: end;
        spacing: 10px;

        HorizontalLayout {
            Text {
                text: "Scale (%)";
                vertical-alignment: center;
            }

            SpinBox {
                minimum: 10;
                maximum: 100;
                step-size: 10;
                width: 100px;
                value: root.scale;

                edited(value) => {
                    root.scale = value;
                    self.clear-focus();
                }
            }
        }
    }
}

export component Canvas inherits ScrollView {
    property <image> source: State.image.source;
    in property <int> scale: 100;

    VerticalLayout {
        alignment: center;

        HorizontalLayout {
            alignment: center;

            Image {
                source: root.source;
                width: root.source.width * 1px * root.scale / 100;
                height: root.source.height * 1px * root.scale / 100;

                Rectangle {
                    x: 0;
                    y: 0;
                    width: parent.width;
                    height: parent.height;

                    for text_block[index] in State.text-blocks: TextBlockAnnotation {
                        text-block: text_block;
                        index: index + 1;
                        scale: root.scale;
                    }
                }
            }
        }
    }
}
